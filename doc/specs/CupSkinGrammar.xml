<?xml version="1.0" encoding="UTF-8"?>

<!-- This skin imitates JLex and JavaCUP, as closely as is possible
     in Copper's parsing paradigm. -->
<CopperSpec xmlns="http://melt.cs.umn.edu/copper/xmlns">
    <Parser id="CupSkinParser" isUnitary="true">
        <Grammars>
            <GrammarRef id="CupSkinGrammar"/>
        </Grammars>
        <StartSymbol>
            <NonterminalRef grammar="CupSkinGrammar" id="GrammarFile"/>
        </StartSymbol>
        <Package>edu.umn.cs.melt.copper.compiletime.skins.cup</Package>
        <ClassName>CupSkinParser</ClassName>
		<ClassAuxiliaryCode>
			<Code><![CDATA[ public CompilerLogger logger; 
			private ParserBean currentParser;
			private Grammar currentGrammar;
			private TreeSet<CopperElementReference> ignoreTerminals;
			
			private int nextPrecedence = 0;
			private int nextProduction = 0;
			private int nextProductionPrecedence = Integer.MAX_VALUE;
			
			private CopperElementName newName(Token token)
			{
			   try { return CopperElementName.newName(token.lexeme); }
			   catch(ParseException ex)
			   {
			       logger.log(new GenericLocatedMessage(CompilerLevel.QUIET,token.location,"Unexpected element name -- bug in CUP skin parser",true,true));
			       return null;
			   }
			}
			
			private CopperElementReference newReference(Token token)
			{
			   try { return CopperElementReference.ref(currentGrammar.getName(),token.lexeme,token.location); }
			   catch(ParseException ex)
			   {
			       logger.log(new GenericLocatedMessage(CompilerLevel.QUIET,token.location,"Unexpected element name -- bug in CUP skin parser",true,true));
			       return null;
			   }
			}
			
			private static class Token
			{
				public String lexeme;
				public Location location;
				
				public Token(String lexeme,Location location)
				{
					this.lexeme = lexeme;
					this.location = location;
				}
			}
			
			private static class PrecLists
			{
				public LinkedList<CopperElementReference> termClasses;
				public LinkedList<CopperElementReference> submitList;
				public LinkedList<CopperElementReference> dominateList;
				
				public PrecLists()
				{
				    this.termClasses = null;
				    this.submitList = null;
				    this.dominateList = null;
				}
			}
			
			private static class TerminalFlags
			{
				public CopperElementReference prefix;
			}
			
			private static class ProductionRHSFlags
			{
				public LinkedList<CopperElementReference> layout;
				public CopperElementReference operator;
			}
			
			private static class LabeledName
			{
				public Token label;
				public Token name;
				
				public LabeledName(Token label,Token name)
				{
					this.label = label;
					this.name = name;
				}
				
				public LabeledName(Token name)
				{
				    this(null,name);
				}
			}
			
			private void logError(String message,Location location)
			{
			    logger.log(new GenericLocatedMessage(CompilerLevel.QUIET,location,message,true,false));
			}
			
			public CupSkinParser(CompilerLogger logger)
			{
				this.logger = logger;
			}
			
			public static ParserBean parseGrammar(ArrayList< Pair<String,Reader> > files,CompilerLogger logger)
    		throws IOException,CopperException
    		{
    			boolean hasError = true;
    			if(files.size() != 1)
    			{
    				logger.logError(new GenericMessage(CompilerLevel.QUIET,"CUP skin requires exactly one input file",true,true));
    			}
        		ParserBean spec;
				try
				{
					CupSkinParser engine = new CupSkinParser(logger);
					spec = engine.parse(files.get(0).second(),files.get(0).first());
					hasError = ParserSpecProcessor.normalizeParser(spec,logger);
				}
				catch(CopperSyntaxError ex)
				{
					logger.log(new GrammarSyntaxError(ex));
					spec = null;
				}
        		logger.flush();
        		if(hasError) return null;
        		return spec;
    		}
			]]></Code>
		</ClassAuxiliaryCode>
		<ParserInitCode>
			<Code><![CDATA[ 
			currentParser = new ParserBean();
			currentGrammar = new Grammar();
			ignoreTerminals = new TreeSet<CopperElementReference>();
			currentGrammar.setGrammarLayout(ignoreTerminals); 
			 ]]></Code>
		</ParserInitCode>
		<PostParseCode>
			<Code><![CDATA[ CompilerLogger thisLogger = new CompilerLogger(new PrintCompilerLogHandler(System.err));
			try { ParserSpecProcessor.normalizeParser(root,thisLogger); thisLogger.flush(); } catch(CopperException ex) { ex.printStackTrace(); }
			System.out.println(edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.visitors.ParserSpecPlaintextPrinter.specToString(root)); ]]></Code>
		</PostParseCode>
        <Preamble>
            <Code><![CDATA[import java.util.ArrayList;
import java.util.LinkedList; 
import java.io.IOException;
import java.io.Reader;
import java.text.ParseException;
import java.util.TreeSet;

import edu.umn.cs.melt.copper.compiletime.logging.CompilerLevel;
import edu.umn.cs.melt.copper.compiletime.logging.CompilerLogger;
import edu.umn.cs.melt.copper.compiletime.logging.PrintCompilerLogHandler;
import edu.umn.cs.melt.copper.compiletime.logging.messages.GenericLocatedMessage;
import edu.umn.cs.melt.copper.compiletime.logging.messages.GenericMessage;
import edu.umn.cs.melt.copper.compiletime.logging.messages.GrammarSyntaxError;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.CharacterSetRegex;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.ChoiceRegex;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.ConcatenationRegex;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.CopperElementName;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.CopperElementReference;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.CopperElementType;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.DisambiguationFunction;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.EmptyStringRegex;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.Grammar;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.KleeneStarRegex;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.MacroHoleRegex;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.NonTerminal;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.OperatorAssociativity;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.ParserAttribute;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.ParserBean;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.Production;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.Regex;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.Terminal;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.TerminalClass;
import edu.umn.cs.melt.copper.compiletime.spec.grammarbeans.visitors.ParserSpecProcessor;
import edu.umn.cs.melt.copper.runtime.auxiliary.Pair;
import edu.umn.cs.melt.copper.runtime.auxiliary.internal.QuotedStringFormatter;
import edu.umn.cs.melt.copper.runtime.io.Location;
import edu.umn.cs.melt.copper.runtime.io.ScannerBuffer;
import edu.umn.cs.melt.copper.runtime.logging.CopperException;
import edu.umn.cs.melt.copper.runtime.logging.CopperSyntaxError;
]]></Code>
        </Preamble>
    </Parser>


    <Grammar id="CupSkinGrammar">
        <Layout>
            <TerminalRef id="ws"/>
        </Layout>

        <Declarations>
            <Terminal id="barrier_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="%"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="%"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="goesto_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char=":"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char=":"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="="/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="comma_kwd">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char=","/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="semi_kwd">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char=";"/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="slash_kwd">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char="/"/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="lt_kwd">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char="&lt;"/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="gt_kwd">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char="&gt;"/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="colon_kwd">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char=":"/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="attribute_decl_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="%"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="a"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="t"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="t"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="r"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="layout_decl_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="%"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="l"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="a"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="y"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="o"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="u"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="t"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="parser_decl_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="%"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="p"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="a"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="r"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="s"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="e"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="r"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="prec_decl_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="%"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="p"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="r"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="e"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="c"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="prefix_decl_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="%"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="p"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="r"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="e"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="f"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="i"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="x"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="aux_block_open_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="%"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="a"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="u"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="x"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="{"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="aux_block_close_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="%"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="a"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="u"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="x"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="}"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="init_block_open_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="%"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="i"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="n"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="i"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="t"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="{"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="init_block_close_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="%"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="i"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="n"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="i"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="t"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="}"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="lex_block_open_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="%"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="l"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="e"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="x"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="{"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="lex_block_close_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="%"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="l"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="e"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="x"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="}"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="cf_block_open_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="%"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="c"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="f"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="{"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="cf_block_close_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="%"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="c"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="f"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="}"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="code_block_open_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="{"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char=":"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="code_block_close_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char=":"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="}"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="non_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="n"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="o"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="n"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="ignore_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="i"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="g"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="n"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="o"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="r"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="e"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="terminal_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="t"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="e"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="r"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="m"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="i"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="n"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="a"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="l"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="class_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="c"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="l"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="a"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="s"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="s"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>
            <Terminal id="precedence_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="p"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="r"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="e"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="c"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="e"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="d"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="e"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="n"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="c"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="e"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="disambiguate_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="d"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="i"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="s"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="a"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="m"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="b"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="i"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="g"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="u"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="a"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="t"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="e"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="start_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="s"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="t"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="a"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="r"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="t"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="with_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="w"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="i"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="t"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="h"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>

            <Terminal id="in_kwd">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="i"/>
                        </CharacterSet>
                        <CharacterSet>
                            <SingleCharacter char="n"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
            </Terminal>


            <Terminal id="assoctypes_kwd">
                <Regex> 
                    <Choice>
                        <Concatenation>
                            <CharacterSet>
                                <SingleCharacter char="l"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="e"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="f"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="t"/>
                            </CharacterSet>
                        </Concatenation>
                        <Concatenation>
                            <CharacterSet>
                                <SingleCharacter char="r"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="i"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="g"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="h"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="t"/>
                            </CharacterSet>
                        </Concatenation>
                        <Concatenation>
                            <CharacterSet>
                                <SingleCharacter char="n"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="o"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="n"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="a"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="s"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="s"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="o"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="c"/>
                            </CharacterSet>
                        </Concatenation>
                    </Choice>
                </Regex>
                <Type>OperatorAssociativity</Type>
                <Code><![CDATA[
                if(lexeme.equals("left")) RESULT = OperatorAssociativity.LEFT;
                else if(lexeme.equals("right")) RESULT = OperatorAssociativity.RIGHT;
                else if(lexeme.equals("nonassoc")) RESULT = OperatorAssociativity.NONASSOC;
                else RESULT = OperatorAssociativity.NONE;]]></Code>
            </Terminal>

            <Terminal id="name_tok">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <CharacterRange lower="A" upper="Z"/>
                            <!--<SingleCharacter char="_"/>-->
                            <CharacterRange lower="a" upper="z"/>
                        </CharacterSet>
                        <KleeneStar>
                            <CharacterSet>
                                <CharacterRange lower="0" upper="9"/>
                                <CharacterRange lower="A" upper="Z"/>
                                <SingleCharacter char="_"/>
                                <CharacterRange lower="a" upper="z"/>
                            </CharacterSet>
                        </KleeneStar>
                    </Concatenation>
                </Regex>
                <Type>Token</Type>
                <Code><![CDATA[ RESULT = new Token(lexeme,getStartRealLocation()); ]]></Code>
            </Terminal>

            <Terminal id="prec_number">
                <Regex> 
                    <Choice>
                        <Concatenation>
                            <CharacterSet>
                                <CharacterRange lower="1" upper="9"/>
                            </CharacterSet>
                            <KleeneStar>
                                <CharacterSet>
                                    <CharacterRange lower="0" upper="9"/>
                                </CharacterSet>
                            </KleeneStar>
                        </Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="0"/>
                        </CharacterSet>
                    </Choice>
                </Regex>
                <Type>Integer</Type>
                <Code><![CDATA[ RESULT = Integer.parseInt(lexeme); ]]></Code>
            </Terminal>

            <Terminal id="plus">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char="+"/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="star">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char="*"/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="question">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char="?"/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="bar">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char="|"/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="dash">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char="-"/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="colon">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char=":"/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="not">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char="^"/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="lbrack">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char="["/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="rbrack">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char="]"/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="lparen">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char="("/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="rparen">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char=")"/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="lbrace">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char="{"/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="rbrace">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char="}"/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="wildcard">
                <Regex> 
                    <CharacterSet>
                        <SingleCharacter char="."/>
                    </CharacterSet>
                </Regex>
            </Terminal>

            <Terminal id="character">
                <Regex> 
                    <CharacterSet invert="true">
                        <SingleCharacter char="&#10;"/>
                        <SingleCharacter char="&#13;"/>
                    </CharacterSet>
                </Regex>
                <Type>Character</Type>
                <Code><![CDATA[ RESULT = lexeme.charAt(0); ]]></Code>
            </Terminal>

            <Terminal id="termname">
                <Regex> 
                    <Concatenation>
                        <CharacterSet invert="true">
                            <SingleCharacter char=":"/>
                        </CharacterSet>
                        <KleeneStar>
                            <CharacterSet invert="true">
                                <SingleCharacter char=":"/>
                            </CharacterSet>
                        </KleeneStar>
                    </Concatenation>
                </Regex>
                <Type>Token</Type>
                <Code><![CDATA[ RESULT = new Token(lexeme,getStartRealLocation()); ]]></Code>
            </Terminal>

            <Terminal id="escaped">
                <Regex> 
                    <Concatenation>
                        <CharacterSet>
                            <SingleCharacter char="\"/>
                        </CharacterSet>
                        <CharacterSet invert="true">
                            <SingleCharacter char="&#10;"/>
                            <SingleCharacter char="&#13;"/>
                        </CharacterSet>
                    </Concatenation>
                </Regex>
                <Type>Character</Type>
                <Code><![CDATA[     char escapedChar = QuotedStringFormatter.getRepresentedCharacter(lexeme);
                                    if(escapedChar == ScannerBuffer.EOFIndicator) error(_pos,"Illegal escaped character");
    								RESULT = escapedChar; ]]></Code>
            </Terminal>


            <Terminal id="code_t">
                <Regex> 
                    <KleeneStar>
                        <Choice>
                            <KleeneStar>
                                <CharacterSet invert="true">
                                    <SingleCharacter char="%"/>
                                    <SingleCharacter char=":"/>
                                </CharacterSet>
                            </KleeneStar>
                            <Concatenation>
                                <CharacterSet invert="true">
                                    <SingleCharacter char="&#10;"/>
                                	<SingleCharacter char="&#13;"/>
                                    <SingleCharacter char="%"/>
                                </CharacterSet>
                                <CharacterSet>
                                    <SingleCharacter char="%"/>
                                </CharacterSet>
                            </Concatenation>
                            <Concatenation>
                                <CharacterSet>
                                    <SingleCharacter char=":"/>
                                </CharacterSet>
                                <CharacterSet invert="true">
                                    <SingleCharacter char="}"/>
                                </CharacterSet>
                            </Concatenation>
                        </Choice>
                    </KleeneStar>
                </Regex>
                <Type>Token</Type>
                <Code><![CDATA[ RESULT = new Token(lexeme,getStartRealLocation()); ]]></Code>
            </Terminal>

            <Terminal id="ws">
                <Regex> 
                    <Choice>
                        <Concatenation>
                            <CharacterSet>
                                <CharacterRange lower="&#9;" upper="&#10;"/>
                                <SingleCharacter char="&#13;"/>
                                <SingleCharacter char=" "/>
                            </CharacterSet>
                            <KleeneStar>
                                <CharacterSet>
                                    <CharacterRange lower="&#9;" upper="&#10;"/>
                                	<SingleCharacter char="&#13;"/>
                                    <SingleCharacter char=" "/>
                                </CharacterSet>
                            </KleeneStar>
                        </Concatenation>
                        <Concatenation>
                            <CharacterSet>
                                <SingleCharacter char="/"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="/"/>
                            </CharacterSet>
                            <KleeneStar>
                                <CharacterSet invert="true">
                                    <SingleCharacter char="&#10;"/>
                                	<SingleCharacter char="&#13;"/>
                                </CharacterSet>
                            </KleeneStar>
                        </Concatenation>
                        <Concatenation>
                            <CharacterSet>
                                <SingleCharacter char="/"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="*"/>
                            </CharacterSet>
                            <KleeneStar>
                                <Choice>
                                    <Concatenation>
                                        <CharacterSet>
                                            <SingleCharacter char="*"/>
                                        </CharacterSet>
                                        <CharacterSet invert="true">
                                            <SingleCharacter char="/"/>
                                        </CharacterSet>
                                    </Concatenation>
                                    <CharacterSet invert="true">
                                        <SingleCharacter char="*"/>
                                    </CharacterSet>
                                </Choice>
                            </KleeneStar>
                            <CharacterSet>
                                <SingleCharacter char="*"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="/"/>
                            </CharacterSet>
                        </Concatenation>
                    </Choice>
                </Regex>
            </Terminal>

            <Terminal id="ws_no_line">
                <Regex> 
                    <Choice>
                        <Concatenation>
                            <CharacterSet>
                                <CharacterRange lower="&#9;" upper="&#10;"/>
                                <SingleCharacter char="&#13;"/>
                                <SingleCharacter char=" "/>
                            </CharacterSet>
                            <KleeneStar>
                                <CharacterSet>
                                    <CharacterRange lower="&#9;" upper="&#10;"/>
                                	<SingleCharacter char="&#13;"/>
                                    <SingleCharacter char=" "/>
                                </CharacterSet>
                            </KleeneStar>
                        </Concatenation>
                        <Concatenation>
                            <CharacterSet>
                                <SingleCharacter char="/"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="*"/>
                            </CharacterSet>
                            <KleeneStar>
                                <Choice>
                                    <Concatenation>
                                        <CharacterSet>
                                            <SingleCharacter char="*"/>
                                        </CharacterSet>
                                        <CharacterSet invert="true">
                                            <SingleCharacter char="/"/>
                                        </CharacterSet>
                                    </Concatenation>
                                    <CharacterSet invert="true">
                                        <SingleCharacter char="*"/>
                                    </CharacterSet>
                                </Choice>
                            </KleeneStar>
                            <CharacterSet>
                                <SingleCharacter char="*"/>
                            </CharacterSet>
                            <CharacterSet>
                                <SingleCharacter char="/"/>
                            </CharacterSet>
                        </Concatenation>
                    </Choice>
                </Regex>
            </Terminal>

            <DisambiguationFunction id="ws_code">
                <Members>
                        <TerminalRef id="ws"/>
                        <TerminalRef id="code_t"/>
                </Members>
                <DisambiguateTo><TerminalRef id="code_t"/></DisambiguateTo>
            </DisambiguationFunction>

            <DisambiguationFunction id="char1">
                <Members>
                        <TerminalRef id="lparen"/>
                        <TerminalRef id="character"/>
                </Members>
                <DisambiguateTo><TerminalRef id="lparen"/></DisambiguateTo>
            </DisambiguationFunction>
            <DisambiguationFunction id="char2">
                <Members>
                        <TerminalRef id="rparen"/>
                        <TerminalRef id="character"/>
                </Members>
                <DisambiguateTo><TerminalRef id="rparen"/></DisambiguateTo>
            </DisambiguationFunction>
            <DisambiguationFunction id="char3">
                <Members>
                        <TerminalRef id="wildcard"/>
                        <TerminalRef id="character"/>
                </Members>
                <DisambiguateTo><TerminalRef id="wildcard"/></DisambiguateTo>
            </DisambiguationFunction>
            <DisambiguationFunction id="char4">
                <Members>
                        <TerminalRef id="lbrack"/>
                        <TerminalRef id="character"/>
                </Members>
                <DisambiguateTo><TerminalRef id="lbrack"/></DisambiguateTo>
            </DisambiguationFunction>
            <DisambiguationFunction id="char5">
                <Members>
                        <TerminalRef id="rbrack"/>
                        <TerminalRef id="character"/>
                </Members>
                <DisambiguateTo><TerminalRef id="rbrack"/></DisambiguateTo>
            </DisambiguationFunction>
            <DisambiguationFunction id="char6">
                <Members>
                        <TerminalRef id="bar"/>
                        <TerminalRef id="character"/>
                </Members>
                <DisambiguateTo><TerminalRef id="bar"/></DisambiguateTo>
            </DisambiguationFunction>
            <DisambiguationFunction id="char7">
                <Members>
                        <TerminalRef id="question"/>
                        <TerminalRef id="character"/>
                </Members>
                <DisambiguateTo><TerminalRef id="question"/></DisambiguateTo>
            </DisambiguationFunction>
            <DisambiguationFunction id="char8">
                <Members>
                        <TerminalRef id="star"/>
                        <TerminalRef id="character"/>
                </Members>
                <DisambiguateTo><TerminalRef id="star"/></DisambiguateTo>
            </DisambiguationFunction>
            <DisambiguationFunction id="char9">
                <Members>
                        <TerminalRef id="dash"/>
                        <TerminalRef id="character"/>
                </Members>
                <DisambiguateTo><TerminalRef id="dash"/></DisambiguateTo>
            </DisambiguationFunction>
            <DisambiguationFunction id="char10">
                <Members>
                        <TerminalRef id="not"/>
                        <TerminalRef id="character"/>
                </Members>
                <DisambiguateTo><TerminalRef id="not"/></DisambiguateTo>
            </DisambiguationFunction>
            <DisambiguationFunction id="char11">
                <Members>
                        <TerminalRef id="colon"/>
                        <TerminalRef id="character"/>
                </Members>
                <DisambiguateTo><TerminalRef id="colon"/></DisambiguateTo>
            </DisambiguationFunction>
            <DisambiguationFunction id="char12">
                <Members>
                        <TerminalRef id="plus"/>
                        <TerminalRef id="character"/>
                </Members>
                <DisambiguateTo><TerminalRef id="plus"/></DisambiguateTo>
            </DisambiguationFunction>
            <DisambiguationFunction id="char13">
                <Members>
                        <TerminalRef id="slash_kwd"/>
                        <TerminalRef id="character"/>
                </Members>
                <DisambiguateTo><TerminalRef id="slash_kwd"/></DisambiguateTo>
            </DisambiguationFunction>

            <DisambiguationFunction id="name1">
                <Members>
                        <TerminalRef id="non_kwd"/>
                        <TerminalRef id="name_tok"/>
                </Members>
                <DisambiguateTo><TerminalRef id="non_kwd"/></DisambiguateTo>
            </DisambiguationFunction>
            <DisambiguationFunction id="name2">
                <Members>
                        <TerminalRef id="start_kwd"/>
                        <TerminalRef id="name_tok"/>
                </Members>
                <DisambiguateTo><TerminalRef id="start_kwd"/></DisambiguateTo>
            </DisambiguationFunction>
            <DisambiguationFunction id="name3">
                <Members>
                        <TerminalRef id="precedence_kwd"/>
                        <TerminalRef id="name_tok"/>
                </Members>
                <DisambiguateTo><TerminalRef id="precedence_kwd"/></DisambiguateTo>
            </DisambiguationFunction>

            <DisambiguationFunction id="wss">
                <Members>
                        <TerminalRef id="ws"/>
                        <TerminalRef id="ws_no_line"/>
                </Members>
                <DisambiguateTo><TerminalRef id="ws"/></DisambiguateTo>
            </DisambiguationFunction>

            <Nonterminal id="GrammarFile">
            	<Type>ParserBean</Type>
            </Nonterminal>
            <Nonterminal id="ParserDecl"/>
            <Nonterminal id="DeclBlocks"/>
            <Nonterminal id="DeclBlock"/>
            <Nonterminal id="LexDecls"/>
            <Nonterminal id="CFDecls"/>
            <Nonterminal id="LexDecl"/>
            <Nonterminal id="CFDecl"/>
            <Nonterminal id="IgnoreOpt">
            	<Type>Boolean</Type>
            </Nonterminal>
            <Nonterminal id="PrecListsOpt">
            	<Type>PrecLists</Type>
            </Nonterminal>
            <Nonterminal id="PrecLists">
            	<Type>PrecLists</Type>
            </Nonterminal>
            <Nonterminal id="PrecList">
            	<Type>PrecLists</Type>
            </Nonterminal>
            <Nonterminal id="TerminalFlags">
            	<Type>TerminalFlags</Type>
            </Nonterminal>
            <Nonterminal id="SuperRegexRoot">
            	<Type>Regex</Type>
            </Nonterminal>
            <Nonterminal id="RegexRoot">
            	<Type>Regex</Type>
            </Nonterminal>
            <Nonterminal id="CommaOrSymSeq">
            	<Type>LinkedList&lt;CopperElementReference&gt;</Type>
            </Nonterminal>
            <Nonterminal id="CommaSymSeq">
            	<Type>LinkedList&lt;CopperElementReference&gt;</Type>
            </Nonterminal>
            <Nonterminal id="CommaSymSeqOpt">
            	<Type>LinkedList&lt;CopperElementReference&gt;</Type>
            </Nonterminal>
            <Nonterminal id="TypeNameSeq">
            	<Type>LinkedList&lt;Token&gt;</Type>
            </Nonterminal>
            <Nonterminal id="TypeName">
            	<Type>Token</Type>
            </Nonterminal>
            <Nonterminal id="QualifiedName">
            	<Type>Token</Type>
            </Nonterminal>
            <Nonterminal id="SymSeq">
            	<Type>LinkedList&lt;CopperElementReference&gt;</Type>
            </Nonterminal>
            <Nonterminal id="LabeledSymSeq">
            	<Type>LinkedList&lt;LabeledName&gt;</Type>
            </Nonterminal>
            <Nonterminal id="RHS">
            	<Type>Production</Type>
            </Nonterminal>
            <Nonterminal id="RHSSeq">
            	<Type>LinkedList&lt;Production&gt;</Type>
            </Nonterminal>
            <Nonterminal id="RHSFlags">
            	<Type>ProductionRHSFlags</Type>
           	</Nonterminal>
            <Nonterminal id="CodeBlockOpt">
            	<Type>Token</Type>
            </Nonterminal>

            <Nonterminal id="Regex_R">
            	<Type>Regex</Type>
            </Nonterminal>
            <Nonterminal id="Regex_DR">
            	<Type>Regex</Type>
            </Nonterminal>
            <Nonterminal id="Regex_UR">
            	<Type>Regex</Type>
            </Nonterminal>
            <Nonterminal id="Regex_RR">
            	<Type>Regex</Type>
            </Nonterminal>
            <Nonterminal id="Regex_G">
            	<Type>CharacterSetRegex</Type>
            </Nonterminal>
            <Nonterminal id="Regex_RG">
            	<Type>CharacterSetRegex</Type>
            </Nonterminal>
            <Nonterminal id="Regex_UG">
            	<Type>CharacterSetRegex</Type>
            </Nonterminal>
            <Nonterminal id="Regex_CHAR">
            	<Type>Character</Type>
            </Nonterminal>

            <Production id="GrammarFileMain">
                <Code><![CDATA[ 
                     currentParser.setPreambleCode(code.lexeme);
                     currentParser.setLocation(code.location);
                     currentGrammar.setLocation(code.location);
                     try { currentParser.addGrammar(currentGrammar); }
	    			catch(CopperException ex) { logError(ex.getMessage(),getVirtualLocation()); }
                     RESULT = currentParser;
                  ]]></Code>
                <LHS><NonterminalRef id="GrammarFile"/></LHS>
                <RHS>
                    <TerminalRef id="code_t" name="code"/>
                    <TerminalRef id="barrier_kwd"/>
                    <NonterminalRef id="ParserDecl"/>
                    <NonterminalRef id="DeclBlocks"/>
                </RHS>
            </Production>

            <Production id="ParserDeclMain">
                <Code><![CDATA[ currentParser.setName(newName(parserName));
                				currentParser.setUnitary(true);
                                currentGrammar.setName(newName(new Token("_" + parserName.lexeme,parserName.location)));
                                currentParser.setClassName(parserName.lexeme); ]]></Code>
                <LHS><NonterminalRef id="ParserDecl"/></LHS>
                <RHS>
                    <TerminalRef id="parser_decl_kwd"/>
                    <TerminalRef id="name_tok" name="parserName"/>
                </RHS>
            </Production>


            <Production id="DeclBlocksCons">
                <Code><![CDATA[ ]]></Code>
                <LHS><NonterminalRef id="DeclBlocks"/></LHS>
                <RHS>
                    <NonterminalRef id="DeclBlock"/>
                    <NonterminalRef id="DeclBlocks"/>
                </RHS>
            </Production>

            <Production id="DeclBlocksOne">
                <Code><![CDATA[ ]]></Code>
                <LHS><NonterminalRef id="DeclBlocks"/></LHS>
                <RHS>
                    <NonterminalRef id="DeclBlock"/>
                </RHS>
            </Production>

            <Production id="AttrDeclBlock">
                <Code><![CDATA[ ParserAttribute attr = new ParserAttribute();
                attr.setName(newName(name));
                attr.setLocation(name.location);
                attr.setAttributeType(type.lexeme);
				try { currentGrammar.addGrammarElement(attr); }
	    		catch(CopperException ex) { logError(ex.getMessage(),name.location); }
                 ]]></Code>
                <LHS><NonterminalRef id="DeclBlock"/></LHS>
                <RHS>
                    <TerminalRef id="attribute_decl_kwd"/>
                    <NonterminalRef id="TypeName" name="type"/>
                    <TerminalRef id="name_tok" name="name"/>
                    <TerminalRef id="semi_kwd"/>
                </RHS>
            </Production>

            <Production id="AuxDeclBlock">
                <Code><![CDATA[ currentParser.setParserClassAuxCode(code.lexeme); ]]></Code>
                <LHS><NonterminalRef id="DeclBlock"/></LHS>
                <RHS>
                    <TerminalRef id="aux_block_open_kwd"/>
                    <TerminalRef id="code_t" name="code"/>
                    <TerminalRef id="aux_block_close_kwd"/>
                </RHS>
            </Production>

            <Production id="InitDeclBlock">
                <Code><![CDATA[ currentParser.setParserInitCode(code.lexeme); ]]></Code>
                <LHS><NonterminalRef id="DeclBlock"/></LHS>
                <RHS>
                    <TerminalRef id="init_block_open_kwd"/>
                    <TerminalRef id="code_t" name="code"/>
                    <TerminalRef id="init_block_close_kwd"/>
                </RHS>
            </Production>

            <Production id="LexDeclBlock">
                <Code><![CDATA[ ]]></Code>
                <LHS><NonterminalRef id="DeclBlock"/></LHS>
                <RHS>
                    <TerminalRef id="lex_block_open_kwd"/>
                    <NonterminalRef id="LexDecls"/>
                    <TerminalRef id="lex_block_close_kwd"/>
                </RHS>
            </Production>

            <Production id="CFDeclBlock">
                <Code><![CDATA[ ]]></Code>
                <LHS><NonterminalRef id="DeclBlock"/></LHS>
                <RHS>
                    <TerminalRef id="cf_block_open_kwd"/>
                    <NonterminalRef id="CFDecls"/>
                    <TerminalRef id="cf_block_close_kwd"/>
                </RHS>
            </Production>

            <Production id="LexDeclsCons">
                <Code><![CDATA[ ]]></Code>
                <LHS><NonterminalRef id="LexDecls"/></LHS>
                <RHS>
                    <NonterminalRef id="LexDecl"/>
                    <NonterminalRef id="LexDecls"/>
                </RHS>
            </Production>

            <Production id="LexDeclsOne">
                <Code><![CDATA[ ]]></Code>
                <LHS><NonterminalRef id="LexDecls"/></LHS>
                <RHS>
                    <NonterminalRef id="LexDecl"/>
                </RHS>
            </Production>

            <Production id="CFDeclsCons">
                <Code><![CDATA[ ]]></Code>
                <LHS><NonterminalRef id="CFDecls"/></LHS>
                <RHS>
                    <NonterminalRef id="CFDecl"/>
                    <NonterminalRef id="CFDecls"/>
                </RHS>
            </Production>

            <Production id="CFDeclsOne">
                <Code><![CDATA[ ]]></Code>
                <LHS><NonterminalRef id="CFDecls"/></LHS>
                <RHS>
                    <NonterminalRef id="CFDecl"/>
                </RHS>
            </Production>

            <Production id="TermClassDecl">
                <Code><![CDATA[ for(CopperElementReference termClass : classes)
{
	if(currentGrammar.getGrammarElements().contains(termClass.getName()))
	{
		logError("Duplicate declaration of '" + termClass.getName() + "' first declared at " + currentGrammar.getGrammarElement(termClass.getName()).getLocation(),termClass.getLocation());
	}
	else
	{
		TerminalClass bean = new TerminalClass();
		bean.setName(termClass.getName());
		bean.setLocation(termClass.getLocation());
		try { currentGrammar.addGrammarElement(bean); }
	    catch(CopperException ex) { logError(ex.getMessage(),getVirtualLocation()); }
	}
} 
]]></Code>
                <LHS><NonterminalRef id="LexDecl"/></LHS>
                <RHS>
                    <TerminalRef id="class_kwd"/>
                    <NonterminalRef id="CommaSymSeq" name="classes"/>
                    <TerminalRef id="semi_kwd"/>
                </RHS>
            </Production>

            <Production id="TermDecl">
                <Code><![CDATA[ Terminal terminal = null;
                CopperElementName newTerminalName = newName(name);
                if(currentGrammar.getGrammarElements().contains(newTerminalName))
                {
                	if(currentGrammar.getGrammarElement(newTerminalName).getType() != CopperElementType.TERMINAL ||
                	   currentGrammar.getGrammarElement(newTerminalName).getLocation() != null)
                	{
                		logError("Duplicate declaration of '" + newTerminalName + "'" + (currentGrammar.getGrammarElement(newTerminalName).getLocation() != null ? " first declared at " + currentGrammar.getGrammarElement(newTerminalName).getLocation() : ""),name.location);
                	}
                	else
                    {
                        terminal = (Terminal) currentGrammar.getGrammarElement(newTerminalName);
                        terminal.setLocation(name.location);
                    }
                }
                else
                {
                     terminal = new Terminal();
                     terminal.setName(newTerminalName);
                     terminal.setLocation(name.location);
                     try { currentGrammar.addGrammarElement(terminal); }
                     catch(CopperException ex) { logError(ex.getMessage(),name.location); }
                } 
                
                if(terminal != null)
                {
	                terminal.setRegex(regex);
	                if(code != null) terminal.setCode(code.lexeme);
	                if(precLists != null)
	                {
	                	if(precLists.termClasses != null)
	                	{
	                		for(CopperElementReference termClass : precLists.termClasses)
	                		{
	                			terminal.addTerminalClass(termClass);
	                		}
	                	}
	                	if(precLists.submitList != null)
	                	{
	                		for(CopperElementReference t : precLists.submitList)
	                		{
	                			terminal.addSubmitsTo(t);
	                		}
	                	}
	                	if(precLists.dominateList != null)
	                	{
	                		for(CopperElementReference t : precLists.dominateList)
	                		{
	                			terminal.addDominates(t);
	                		}
	                	}
	                }
	                if(terminalFlags.prefix != null) terminal.setPrefix(terminalFlags.prefix);
	                
	                if(ignore) ignoreTerminals.add(CopperElementReference.ref(newTerminalName,name.location));
	            }
                ]]></Code>
                <LHS><NonterminalRef id="LexDecl"/></LHS>
                <RHS>
                    <NonterminalRef id="IgnoreOpt" name="ignore"/>
                    <TerminalRef id="terminal_kwd"/>
                    <TerminalRef id="name_tok" name="name"/>
                    <NonterminalRef id="SuperRegexRoot" name="regex"/>
                    <NonterminalRef id="PrecListsOpt" name="precLists"/>
                    <NonterminalRef id="CodeBlockOpt" name="code"/>
                    <NonterminalRef id="TerminalFlags" name="terminalFlags"/>
                    <TerminalRef id="semi_kwd"/>
                </RHS>
            </Production>

            <Production id="SuperRRoot">
                <Code><![CDATA[ RESULT = regex; ]]></Code>
                <LHS><NonterminalRef id="SuperRegexRoot"/></LHS>
                <RHS>
                    <TerminalRef id="goesto_kwd"/>
                    <NonterminalRef id="RegexRoot" name="regex"/>
                </RHS>
                <Layout>
                    <TerminalRef id="ws_no_line"/>
                </Layout>
            </Production>

            <Production id="TypedTermDecl">
                <Code><![CDATA[ Terminal terminal = null;
                CopperElementName newTerminalName = newName(name);
                if(currentGrammar.getGrammarElements().contains(newTerminalName))
                {
                	if(currentGrammar.getGrammarElement(newTerminalName).getType() != CopperElementType.TERMINAL ||
                	   currentGrammar.getGrammarElement(newTerminalName).getLocation() != null)
                	{
                		logError("Duplicate declaration of '" + newTerminalName + "'" + (currentGrammar.getGrammarElement(newTerminalName).getLocation() != null ? " first declared at " + currentGrammar.getGrammarElement(newTerminalName).getLocation() : ""),name.location);
                	}
                	else
                    {
                        terminal = (Terminal) currentGrammar.getGrammarElement(newTerminalName);
                        terminal.setLocation(name.location);
                    }
                }
                else
                {
                     terminal = new Terminal();
                     terminal.setName(newTerminalName);
                     terminal.setLocation(name.location);
                     try { currentGrammar.addGrammarElement(terminal); }
                     catch(CopperException ex) { logError(ex.getMessage(),name.location); }
                } 
                
                if(terminal != null)
                {
	                terminal.setRegex(regex);
                    terminal.setReturnType(type.lexeme);
	                if(code != null) terminal.setCode(code.lexeme);
	                if(precLists != null)
	                {
	                	if(precLists.termClasses != null)
	                	{
	                		for(CopperElementReference termClass : precLists.termClasses)
	                		{
	                			terminal.addTerminalClass(termClass);
	                		}
	                	}
	                	if(precLists.submitList != null)
	                	{
	                		for(CopperElementReference t : precLists.submitList)
	                		{
	                			terminal.addSubmitsTo(t);
	                		}
	                	}
	                	if(precLists.dominateList != null)
	                	{
	                		for(CopperElementReference t : precLists.dominateList)
	                		{
	                			terminal.addDominates(t);
	                		}
	                	}
	                }
	                if(terminalFlags.prefix != null) terminal.setPrefix(terminalFlags.prefix);
	                
	                if(ignore) ignoreTerminals.add(CopperElementReference.ref(newTerminalName,name.location));
	            } ]]></Code>
                <LHS><NonterminalRef id="LexDecl"/></LHS>
                <RHS>
                    <NonterminalRef id="IgnoreOpt" name="ignore"/>
                    <TerminalRef id="terminal_kwd"/>
                    <NonterminalRef id="TypeName" name="type"/>
                    <TerminalRef id="name_tok" name="name"/>
                    <TerminalRef id="goesto_kwd"/>
                    <NonterminalRef id="RegexRoot" name="regex"/>
                    <NonterminalRef id="PrecListsOpt" name="precLists"/>
                    <NonterminalRef id="CodeBlockOpt" name="code"/>
                    <NonterminalRef id="TerminalFlags" name="terminalFlags"/>
                    <TerminalRef id="semi_kwd"/>
                </RHS>
            </Production>

            <Production id="PrecDeclsCons">
                <Code><![CDATA[
                    if(head.termClasses != null && tail.termClasses != null)
                    {
                    	logError("More than one 'in' list specified on a terminal",getVirtualLocation());
                    }
                    else if(head.termClasses != null && tail.termClasses == null) tail.termClasses = head.termClasses;
                    if(head.submitList != null && tail.submitList != null)
                    {
                    	logError("More than one '<' list specified on a terminal",getVirtualLocation());
                    }
                    else if(head.submitList != null && tail.submitList == null) tail.submitList = head.submitList;
                    if(head.dominateList != null && tail.dominateList != null)
                    {
                    	logError("More than one '>' list specified on a terminal",getVirtualLocation());
                    }
                    else if(head.dominateList != null && tail.dominateList == null) tail.dominateList = head.dominateList;
                    RESULT = tail;
                 ]]></Code>
                <LHS><NonterminalRef id="PrecLists"/></LHS>
                <RHS>
                    <NonterminalRef id="PrecList" name="head"/>
                    <TerminalRef id="comma_kwd"/>
                    <NonterminalRef id="PrecLists" name="tail"/>
                </RHS>
            </Production>

            <Production id="PrecDeclsOne">
                <Code><![CDATA[ RESULT = tail; ]]></Code>
                <LHS><NonterminalRef id="PrecLists"/></LHS>
                <RHS>
                    <NonterminalRef id="PrecList" name="tail"/>
                </RHS>
            </Production>

            <Production id="PrecDeclInList">
                <Code><![CDATA[PrecLists precLists = new PrecLists();
                precLists.termClasses = terms;
                RESULT = precLists; ]]></Code>
                <LHS><NonterminalRef id="PrecList"/></LHS>
                <RHS>
                    <TerminalRef id="in_kwd"/>
                    <TerminalRef id="lparen"/>
                    <NonterminalRef id="CommaSymSeqOpt" name="terms"/>
                    <TerminalRef id="rparen"/>
                </RHS>
            </Production>

            <Production id="PrecDeclSubmitList">
                <Code><![CDATA[ PrecLists precLists = new PrecLists();
                precLists.submitList = terms;
                RESULT = precLists; ]]></Code>
                <LHS><NonterminalRef id="PrecList"/></LHS>
                <RHS>
                    <TerminalRef id="lt_kwd"/>
                    <TerminalRef id="lparen"/>
                    <NonterminalRef id="CommaSymSeqOpt" name="terms"/>
                    <TerminalRef id="rparen"/>
                </RHS>
            </Production>

            <Production id="PrecDeclDominateList">
                <Code><![CDATA[ PrecLists precLists = new PrecLists();
                precLists.dominateList = terms;
                RESULT = precLists;
                ]]></Code>
                <LHS><NonterminalRef id="PrecList"/></LHS>
                <RHS>
                    <TerminalRef id="gt_kwd"/>
                    <TerminalRef id="lparen"/>
                    <NonterminalRef id="CommaSymSeqOpt" name="terms"/>
                    <TerminalRef id="rparen"/>
                </RHS>
            </Production>

            <Production id="PrecDeclsMain">
                <Code><![CDATA[ RESULT = precLists; ]]></Code>
                <LHS><NonterminalRef id="PrecListsOpt"/></LHS>
                <RHS>
                    <NonterminalRef id="PrecLists" name="precLists"/>
                </RHS>
            </Production>

            <Production id="PrecDeclsEps">
                <Code><![CDATA[ RESULT = new PrecLists(); ]]></Code>
                <LHS><NonterminalRef id="PrecListsOpt"/></LHS>
                <RHS/>
            </Production>

            <Production id="TerminalFlagsCons">
                <Code><![CDATA[ if(tail.prefix != null) logError("More than one prefix specified on a terminal",name.location);
                tail.prefix = newReference(name);
                RESULT = tail; ]]></Code>
                <LHS><NonterminalRef id="TerminalFlags"/></LHS>
                <RHS>
                    <TerminalRef id="prefix_decl_kwd"/>
                    <TerminalRef id="name_tok" name="name"/>
                    <NonterminalRef id="TerminalFlags" name="tail"/>
                </RHS>
            </Production>

            <Production id="TerminalFlagsEps">
                <Code><![CDATA[ RESULT = new TerminalFlags(); ]]></Code>
                <LHS><NonterminalRef id="TerminalFlags"/></LHS>
                <RHS/>
            </Production>

            <Production id="GroupDecl">
                <Code><![CDATA[ DisambiguationFunction df = new DisambiguationFunction();
                df.setName(newName(name));
                df.setLocation(name.location);
                TreeSet<CopperElementReference> newMembers = new TreeSet<CopperElementReference>(members);
                df.setMembers(newMembers);
                df.setCode(code.lexeme);
                
                try { currentGrammar.addGrammarElement(df); }
                catch(CopperException ex) { logError(ex.getMessage(),name.location); }
                 ]]></Code>
                <LHS><NonterminalRef id="LexDecl"/></LHS>
                <RHS>
                    <TerminalRef id="disambiguate_kwd"/>
                    <TerminalRef id="name_tok" name="name"/>
                    <TerminalRef id="colon_kwd"/>
                    <TerminalRef id="lparen"/>
                    <NonterminalRef id="CommaSymSeq" name="members"/>
                    <TerminalRef id="rparen"/>
                    <TerminalRef id="code_block_open_kwd"/>
                    <TerminalRef id="code_t" name="code"/>
                    <TerminalRef id="code_block_close_kwd"/>
                    <TerminalRef id="semi_kwd"/>
                </RHS>
            </Production>

            <Production id="GroupDeclSimple">
                <Code><![CDATA[ DisambiguationFunction df = new DisambiguationFunction();
                df.setName(newName(name));
                df.setLocation(name.location);
                TreeSet<CopperElementReference> newMembers = new TreeSet<CopperElementReference>(members);
                df.setMembers(newMembers);
                df.setDisambiguateTo(newReference(disambiguateTo));
                
                try { currentGrammar.addGrammarElement(df); }
                catch(CopperException ex) { logError(ex.getMessage(),name.location); }
                ]]></Code>
                <LHS><NonterminalRef id="LexDecl"/></LHS>
                <RHS>
                    <TerminalRef id="disambiguate_kwd"/>
                    <TerminalRef id="name_tok" name="name"/>
                    <TerminalRef id="colon_kwd"/>
                    <TerminalRef id="lparen"/>
                    <NonterminalRef id="CommaSymSeq" name="members"/>
                    <TerminalRef id="rparen"/>
                    <TerminalRef id="goesto_kwd"/>
                    <TerminalRef id="name_tok" name="disambiguateTo"/>
                    <TerminalRef id="semi_kwd"/>
                </RHS>
            </Production>

            <Production id="CodeBlockOptMain">
                <Code><![CDATA[ RESULT = code; ]]></Code>
                <LHS><NonterminalRef id="CodeBlockOpt"/></LHS>
                <RHS>
                    <TerminalRef id="code_block_open_kwd"/>
                    <TerminalRef id="code_t" name="code"/>
                    <TerminalRef id="code_block_close_kwd"/>
                </RHS>
            </Production>

            <Production id="CodeBlockOptEps">
                <Code><![CDATA[ RESULT = null; ]]></Code>
                <LHS><NonterminalRef id="CodeBlockOpt"/></LHS>
                <RHS/>
            </Production>

            <Production id="IgnoreTerm">
                <Code><![CDATA[ RESULT = true; ]]></Code>
                <LHS><NonterminalRef id="IgnoreOpt"/></LHS>
                <RHS>
                    <TerminalRef id="ignore_kwd"/>
                </RHS>
            </Production>

            <Production id="LanguageTerm">
                <Code><![CDATA[ RESULT = false; ]]></Code>
                <LHS><NonterminalRef id="IgnoreOpt"/></LHS>
                <RHS/>
            </Production>

            <Production id="PrecedenceDecl">
                <Code><![CDATA[
                    for(CopperElementReference name : terminals)
                    {
						Terminal terminal = null;
	                	CopperElementName newTerminalName = name.getName();
	                	if(currentGrammar.getGrammarElements().contains(newTerminalName))
	                	{
	                		if(currentGrammar.getGrammarElement(newTerminalName).getType() != CopperElementType.TERMINAL)
	                		{
	                			logError("Attempt to declare a precedence on '" + newTerminalName + "', which is not a terminal",name.getLocation()); 
	                		}
	                		else
	                		{
	                			terminal = (Terminal) currentGrammar.getGrammarElement(newTerminalName);
	                			if(terminal.getOperatorPrecedence() != null || terminal.getOperatorAssociativity() != null)
	                			{
	                				logError("Precedence declared twice on terminal '" + newTerminalName + "'",name.getLocation());
	                			}
	                		}
	                	}
	                	else
	                	{
        	             	terminal = new Terminal();
		                    terminal.setName(newTerminalName);
	                     	try { currentGrammar.addGrammarElement(terminal); }
	                     	catch(CopperException ex) { logError(ex.getMessage(),getVirtualLocation()); }
	                    }
	                    
	                    if(terminal != null)
	                    {
	                    	terminal.setOperatorPrecedence(nextPrecedence);
	                    	terminal.setOperatorAssociativity(associativity);
	                    }
	                } 
	                nextPrecedence++;
                 ]]></Code>
                <LHS><NonterminalRef id="CFDecl"/></LHS>
                <RHS>
                    <TerminalRef id="precedence_kwd"/>
                    <TerminalRef id="assoctypes_kwd" name="associativity"/>
                    <NonterminalRef id="CommaOrSymSeq" name="terminals"/>
                    <TerminalRef id="semi_kwd"/>
                </RHS>
            </Production>

            <Production id="CommaOrSymSeqNoComma">
                <Code><![CDATA[ tail.addFirst(newReference(name));
                                RESULT = tail; ]]></Code>
                <LHS><NonterminalRef id="CommaOrSymSeq"/></LHS>
                <RHS>
                    <TerminalRef id="name_tok" name="name"/>
                    <NonterminalRef id="SymSeq" name="tail"/>
                </RHS>
            </Production>

            <Production id="CommaOrSymSeqWithComma">
                <Code><![CDATA[ tail.addFirst(newReference(name));
                                RESULT = tail; ]]></Code>
                <LHS><NonterminalRef id="CommaOrSymSeq"/></LHS>
                <RHS>
                    <TerminalRef id="name_tok" name="name"/>
                    <TerminalRef id="comma_kwd"/>
                    <NonterminalRef id="CommaSymSeq" name="tail"/>
                </RHS>
            </Production>

            <Production id="TypedNonTermDecl">
                <Code><![CDATA[
                            for(CopperElementReference ref : names)
                            {
	        	             	NonTerminal nonterminal = new NonTerminal();
			                    nonterminal.setName(ref.getName());
			                    nonterminal.setLocation(ref.getLocation());
			                    nonterminal.setReturnType(type.lexeme);
		                     	try { currentGrammar.addGrammarElement(nonterminal); }
		                     	catch(CopperException ex) { logError(ex.getMessage(),ref.getLocation()); }
		                     }
                 ]]></Code>
                <LHS><NonterminalRef id="CFDecl"/></LHS>
                <RHS>
                    <TerminalRef id="non_kwd"/>
                    <TerminalRef id="terminal_kwd"/>
                    <NonterminalRef id="TypeName" name="type"/>
                    <NonterminalRef id="CommaSymSeq" name="names"/>
                    <TerminalRef id="semi_kwd"/>
                </RHS>
            </Production>

            <Production id="UntypedNonTermDecl">
                <Code><![CDATA[
                            for(CopperElementReference ref : names)
                            {
	        	             	NonTerminal nonterminal = new NonTerminal();
			                    nonterminal.setName(ref.getName());
			                    nonterminal.setLocation(ref.getLocation());
		                     	try { currentGrammar.addGrammarElement(nonterminal); }
		                     	catch(CopperException ex) { logError(ex.getMessage(),ref.getLocation()); }
		                     }
                 ]]></Code>
                <LHS><NonterminalRef id="CFDecl"/></LHS>
                <RHS>
                    <TerminalRef id="non_kwd"/>
                    <TerminalRef id="terminal_kwd"/>
                    <NonterminalRef id="CommaSymSeq" name="names"/>
                    <TerminalRef id="semi_kwd"/>
                </RHS>
            </Production>

            <Production id="TypeNameBase">
                <Code><![CDATA[ RESULT = qname; ]]></Code>
                <LHS><NonterminalRef id="TypeName"/></LHS>
                <RHS>
                    <NonterminalRef id="QualifiedName" name="qname"/>
                </RHS>
            </Production>

            <Production id="TypeNameGeneric">
                <Code><![CDATA[ String rv = qname.lexeme + "< ";
                boolean first = true;
                for(Token name : names)
                {
                	if(!first) rv += " , ";
                	else first = false;
                	rv += name.lexeme;
                } 
                rv += " >";
                RESULT = new Token(rv,qname.location); ]]></Code>
                <LHS><NonterminalRef id="TypeName"/></LHS>
                <RHS>
                    <NonterminalRef id="QualifiedName" name="qname"/>
                    <TerminalRef id="lt_kwd"/>
                    <NonterminalRef id="TypeNameSeq" name="names"/>
                    <TerminalRef id="gt_kwd"/>
                </RHS>
            </Production>

            <Production id="QualifiedNameOne">
                <Code><![CDATA[ RESULT = name; ]]></Code>
                <LHS><NonterminalRef id="QualifiedName"/></LHS>
                <RHS>
                    <TerminalRef id="name_tok" name="name"/>
                </RHS>
            </Production>

            <Production id="QualifiedNameCons">
                <Code><![CDATA[ RESULT = new Token(name.lexeme + "." + qname.lexeme,name.location); ]]></Code>
                <LHS><NonterminalRef id="QualifiedName"/></LHS>
                <RHS>
                    <TerminalRef id="name_tok" name="name"/>
                    <TerminalRef id="wildcard"/>
                    <NonterminalRef id="QualifiedName" name="qname"/>
                </RHS>
            </Production>

            <Production id="TypeNameSeqCons">
                <Code><![CDATA[ tail.addFirst(head);
                                RESULT = tail; ]]></Code>
                <LHS><NonterminalRef id="TypeNameSeq"/></LHS>
                <RHS>
                    <NonterminalRef id="TypeName" name="head"/>
                    <TerminalRef id="comma_kwd"/>
                    <NonterminalRef id="TypeNameSeq" name="tail"/>
                </RHS>
            </Production>

            <Production id="TypeNameSeqOne">
                <Code><![CDATA[ LinkedList<Token> rv = new LinkedList<Token>();
                                rv.add(name);
                                RESULT = rv; ]]></Code>
                <LHS><NonterminalRef id="TypeNameSeq"/></LHS>
                <RHS>
                    <NonterminalRef id="TypeName" name="name"/>
                </RHS>
            </Production>

            <Production id="StartDecl">
                <Code><![CDATA[ if(currentParser.getStartSymbol() != null)
                                {
                                	logError("Only one start symbol allowed in a parser specification; start symbol previously specified at " + currentParser.getStartSymbol().getLocation(),name.location);
                                }
                                else
                                {
                                    currentParser.setStartSymbol(newReference(name));
                                }
                                 ]]></Code>
                <LHS><NonterminalRef id="CFDecl"/></LHS>
                <RHS>
                    <TerminalRef id="start_kwd"/>
                    <TerminalRef id="with_kwd"/>
                    <TerminalRef id="name_tok" name="name"/>
                    <TerminalRef id="semi_kwd"/>
                </RHS>
            </Production>

            <Production id="ProdDecl">
                <Code><![CDATA[ for(Production rhs : rhss)
                {
                	rhs.setLhs(newReference(lhs));
                   	try { currentGrammar.addGrammarElement(rhs); }
                   	catch(CopperException ex) { logError(ex.getMessage(),rhs.getLocation()); }
                }  ]]></Code>
                <LHS><NonterminalRef id="CFDecl"/></LHS>
                <RHS>
                    <TerminalRef id="name_tok" name="lhs"/>
                    <TerminalRef id="goesto_kwd"/>
                    <NonterminalRef id="RHSSeq" name="rhss"/>
                    <TerminalRef id="semi_kwd"/>
                </RHS>
            </Production>

            <Production id="RHSMain">
                <Code><![CDATA[
                Production bean = new Production();
                bean.setName(newName(new Token("_p" + (nextProduction++),getVirtualLocation())));
                bean.setLocation(getVirtualLocation());
                ArrayList<CopperElementReference> rhsSyms = new ArrayList<CopperElementReference>();
                ArrayList<String> rhsVarNames = new ArrayList<String>();
                for(LabeledName rhsSym : rhsElements)
                {
                	rhsSyms.add(newReference(rhsSym.name));
                	if(rhsSym.label != null) rhsVarNames.add(rhsSym.label.lexeme);
                	else rhsVarNames.add(null);
                }
                bean.setRhs(rhsSyms);
                bean.setRhsVarNames(rhsVarNames);
                if(code != null) bean.setCode(code.lexeme);
                if(flags.layout != null) bean.setLayout(new TreeSet<CopperElementReference>(flags.layout));
                if(flags.operator != null) bean.setOperator(flags.operator);
                bean.setPrecedence(nextProductionPrecedence--);
                RESULT = bean;
                ]]></Code>
                <LHS><NonterminalRef id="RHS"/></LHS>
                <RHS>
                    <NonterminalRef id="LabeledSymSeq" name="rhsElements"/>
                    <NonterminalRef id="CodeBlockOpt" name="code"/>
                    <NonterminalRef id="RHSFlags" name="flags"/>
                </RHS>
            </Production>

            <Production id="RHSSeqCons">
                <Code><![CDATA[ tail.add(head);
                                RESULT = tail; ]]></Code>
                <LHS><NonterminalRef id="RHSSeq"/></LHS>
                <RHS>
                    <NonterminalRef id="RHS" name="head"/>
                    <TerminalRef id="bar"/>
                    <NonterminalRef id="RHSSeq" name="tail"/>
                </RHS>
            </Production>

            <Production id="RHSSeqOne">
                <Code><![CDATA[ LinkedList<Production> rv = new LinkedList<Production>();
                                rv.add(rhs);
                                RESULT = rv; ]]></Code>
                <LHS><NonterminalRef id="RHSSeq"/></LHS>
                <RHS>
                    <NonterminalRef id="RHS" name="rhs"/>
                </RHS>
            </Production>

            <Production id="RHSFlagsConsOperator">
                <Code><![CDATA[ if(tail.operator != null) logError("Only one precedence operator allowed per production",name.location);
                                else tail.operator = newReference(name);
                                RESULT = tail; ]]></Code>
                <LHS><NonterminalRef id="RHSFlags"/></LHS>
                <RHS>
                    <TerminalRef id="prec_decl_kwd"/>
                    <TerminalRef id="name_tok" name="name"/>
                    <NonterminalRef id="RHSFlags" name="tail"/>
                </RHS>
            </Production>

            <Production id="RHSFlagsConsLayout">
                <Code><![CDATA[ if(tail.layout != null) logError("Only one set of layout allowed per production",getVirtualLocation());
                                else tail.layout = layout;
                                RESULT = tail; ]]></Code>
                <LHS><NonterminalRef id="RHSFlags"/></LHS>
                <RHS>
                    <TerminalRef id="layout_decl_kwd"/>
                    <TerminalRef id="lparen"/>
                    <NonterminalRef id="CommaSymSeqOpt" name="layout"/>
                    <TerminalRef id="rparen"/>
                    <NonterminalRef id="RHSFlags" name="tail"/>
                </RHS>
            </Production>

            <Production id="RHSFlagsEps">
                <Code><![CDATA[ RESULT = new ProductionRHSFlags(); ]]></Code>
                <LHS><NonterminalRef id="RHSFlags"/></LHS>
                <RHS/>
            </Production>

            <Production id="CommaSymSeqOptMain">
                <Code><![CDATA[ RESULT = seq; ]]></Code>
                <LHS><NonterminalRef id="CommaSymSeqOpt"/></LHS>
                <RHS>
                    <NonterminalRef id="CommaSymSeq" name="seq"/>
                </RHS>
            </Production>

            <Production id="CommaSymSeqOptEps">
                <Code><![CDATA[ RESULT = new LinkedList<CopperElementReference>(); ]]></Code>
                <LHS><NonterminalRef id="CommaSymSeqOpt"/></LHS>
                <RHS/>
            </Production>

            <Production id="CommaSymSeqMain">
                <Code><![CDATA[ tail.addFirst(newReference(head));
                                RESULT = tail;
                               ]]></Code>
                <LHS><NonterminalRef id="CommaSymSeq"/></LHS>
                <RHS>
                    <TerminalRef id="name_tok" name="head"/>
                    <TerminalRef id="comma_kwd"/>
                    <NonterminalRef id="CommaSymSeq" name="tail"/>
                </RHS>
            </Production>

            <Production id="CommaSymSeqOne">
                <Code><![CDATA[ LinkedList<CopperElementReference> newList = new LinkedList<CopperElementReference>();
                                newList.add(newReference(name));
                                RESULT = newList; ]]></Code>
                <LHS><NonterminalRef id="CommaSymSeq"/></LHS>
                <RHS>
                    <TerminalRef id="name_tok" name="name"/>
                </RHS>
            </Production>


            <Production id="LabeledSymSeqLabel">
                <Code><![CDATA[ tail.addFirst(new LabeledName(label,name));
                                RESULT = tail; ]]></Code>
                <LHS><NonterminalRef id="LabeledSymSeq"/></LHS>
                <RHS>
                    <TerminalRef id="name_tok" name="name"/>
                    <TerminalRef id="colon"/>
                    <TerminalRef id="name_tok" name="label"/>
                    <NonterminalRef id="LabeledSymSeq" name="tail"/>
                </RHS>
            </Production>

            <Production id="LabeledSymSeqNoLabel">
                <Code><![CDATA[ tail.addFirst(new LabeledName(name));
                                RESULT = tail; ]]></Code>
                <LHS><NonterminalRef id="LabeledSymSeq"/></LHS>
                <RHS>
                    <TerminalRef id="name_tok" name="name"/>
                    <NonterminalRef id="LabeledSymSeq" name="tail"/>
                </RHS>
            </Production>

            <Production id="LabeledSymSeqEps">
                <Code><![CDATA[ RESULT = new LinkedList<LabeledName>(); ]]></Code>
                <LHS><NonterminalRef id="LabeledSymSeq"/></LHS>
                <RHS/>
            </Production>

            <Production id="SymSeqMain">
                <Code><![CDATA[ tail.addFirst(newReference(name));
                                 RESULT = tail; ]]></Code>
                <LHS><NonterminalRef id="SymSeq"/></LHS>
                <RHS>
                    <TerminalRef id="name_tok" name="name"/>
                    <NonterminalRef id="SymSeq" name="tail"/>
                </RHS>
            </Production>

            <Production id="SymSeqEps">
                <Code><![CDATA[ RESULT = new LinkedList<CopperElementReference>(); ]]></Code>
                <LHS><NonterminalRef id="SymSeq"/></LHS>
                <RHS/>
            </Production>

            <Production id="RoottoR">
                <Code><![CDATA[ RESULT = regex; ]]></Code>
                <LHS><NonterminalRef id="RegexRoot"/></LHS>
                <RHS>
                    <TerminalRef id="slash_kwd"/>
                    <TerminalRef id="Regex_R" name="regex"/>
                    <TerminalRef id="slash_kwd"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="Roottoeps">
                <Code><![CDATA[ RESULT = new EmptyStringRegex(); ]]></Code>
                <LHS><NonterminalRef id="RegexRoot"/></LHS>
                <RHS>
                    <TerminalRef id="slash_kwd"/>
                    <TerminalRef id="slash_kwd"/>
                </RHS>
                <Layout/>
            </Production>

            <Production id="RtoDR">
                <Code><![CDATA[ RESULT = regex; ]]></Code>
                <LHS><NonterminalRef id="Regex_R"/></LHS>
                <RHS>
                    <TerminalRef id="Regex_DR" name="regex"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="RtoDR_bar_R">
                <Code><![CDATA[ RESULT = new ChoiceRegex().addSubexps(lhs,rhs); ]]></Code>
                <LHS><NonterminalRef id="Regex_R"/></LHS>
                <RHS>
                    <TerminalRef id="Regex_DR" name="lhs"/>
                    <TerminalRef id="bar"/>
                    <TerminalRef id="Regex_R" name="rhs"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="DRtoUR_RR">
                <Code><![CDATA[ RESULT = new ConcatenationRegex().addSubexps(lhs,rhs); ]]></Code>
                <LHS><NonterminalRef id="Regex_DR"/></LHS>
                <RHS>
                    <TerminalRef id="Regex_UR" name="lhs"/>
                    <TerminalRef id="Regex_RR" name="rhs"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="DRtoUR_star_RR">
                <Code><![CDATA[ RESULT = new ConcatenationRegex().addSubexps(new KleeneStarRegex(starred),rest); ]]></Code>
                <LHS><NonterminalRef id="Regex_DR"/></LHS>
                <RHS>
                    <TerminalRef id="Regex_UR" name="starred"/>
                    <TerminalRef id="star"/>
                    <TerminalRef id="Regex_RR" name="rest"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="DRtoUR_plus_RR">
                <Code><![CDATA[ RESULT = new ConcatenationRegex().addSubexps(plussed,new KleeneStarRegex(plussed),rest); ]]></Code>
                <LHS><NonterminalRef id="Regex_DR"/></LHS>
                <RHS>
                    <TerminalRef id="Regex_UR" name="plussed"/>
                    <TerminalRef id="plus"/>
                    <TerminalRef id="Regex_RR" name="rest"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="DRtoUR_question_RR">
                <Code><![CDATA[ RESULT = new ConcatenationRegex().addSubexps(new ChoiceRegex().addSubexps(opt,new EmptyStringRegex()),rest); ]]></Code>
                <LHS><NonterminalRef id="Regex_DR"/></LHS>
                <RHS>
                    <TerminalRef id="Regex_UR" name="opt"/>
                    <TerminalRef id="question"/>
                    <TerminalRef id="Regex_RR" name="rest"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="RRtoDR">
                <Code><![CDATA[ RESULT = regex; ]]></Code>
                <LHS><NonterminalRef id="Regex_RR"/></LHS>
                <RHS>
                    <TerminalRef id="Regex_DR" name="regex"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="RRtoeps">
                <Code><![CDATA[ RESULT = new EmptyStringRegex(); ]]></Code>
                <LHS><NonterminalRef id="Regex_RR"/></LHS>
                <RHS/>
                <Layout/>
            </Production>


            <Production id="URtoCHAR">
                <Code><![CDATA[ RESULT = new CharacterSetRegex().addLooseChar(character); ]]></Code>
                <LHS><NonterminalRef id="Regex_UR"/></LHS>
                <RHS>
                    <TerminalRef id="Regex_CHAR" name="character"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="URtowildcard">
                <Code><![CDATA[ RESULT = new CharacterSetRegex().addLooseChar('\n').invert(); ]]></Code>
                <LHS><NonterminalRef id="Regex_UR"/></LHS>
                <RHS>
                    <TerminalRef id="wildcard"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="URtolb_G_rb">
                <Code><![CDATA[ RESULT = regex; ]]></Code>
                <LHS><NonterminalRef id="Regex_UR"/></LHS>
                <RHS>
                    <TerminalRef id="lbrack"/>
                    <TerminalRef id="Regex_G" name="regex"/>
                    <TerminalRef id="rbrack"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="URtolb_not_G_rb">
                <Code><![CDATA[ RESULT = regex.invert(); ]]></Code>
                <LHS><NonterminalRef id="Regex_UR"/></LHS>
                <RHS>
                    <TerminalRef id="lbrack"/>
                    <TerminalRef id="not"/>
                    <TerminalRef id="Regex_G" name="regex"/>
                    <TerminalRef id="rbrack"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="URtomacro">
                <Code><![CDATA[ RESULT = new MacroHoleRegex(newReference(term)); ]]></Code>
                <LHS><NonterminalRef id="Regex_UR"/></LHS>
                <RHS>
                    <TerminalRef id="lbrack"/>
                    <TerminalRef id="colon"/>
                    <TerminalRef id="termname" name="term"/>
                    <TerminalRef id="colon"/>
                    <TerminalRef id="rbrack"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="URtolp_R_rp">
                <Code><![CDATA[ RESULT = regex; ]]></Code>
                <LHS><NonterminalRef id="Regex_UR"/></LHS>
                <RHS>
                    <TerminalRef id="lparen"/>
                    <TerminalRef id="Regex_R" name="regex"/>
                    <TerminalRef id="rparen"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="GtoUG_RG">
                <Code><![CDATA[ RESULT = CharacterSetRegex.union(lhs,rhs); ]]></Code>
                <LHS><NonterminalRef id="Regex_G"/></LHS>
                <RHS>
                    <TerminalRef id="Regex_UG" name="lhs"/>
                    <TerminalRef id="Regex_RG" name="rhs"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="UGtoCHAR">
                <Code><![CDATA[ RESULT = new CharacterSetRegex().addLooseChar(character); ]]></Code>
                <LHS><NonterminalRef id="Regex_UG"/></LHS>
                <RHS>
                    <TerminalRef id="Regex_CHAR" name="character"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="UGtoCHAR_dash_CHAR">
                <Code><![CDATA[ RESULT = new CharacterSetRegex().addRange(lower,upper); ]]></Code>
                <LHS><NonterminalRef id="Regex_UG"/></LHS>
                <RHS>
                    <TerminalRef id="Regex_CHAR" name="lower"/>
                    <TerminalRef id="dash"/>
                    <TerminalRef id="Regex_CHAR" name="upper"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="RGtoG">
                <Code><![CDATA[ RESULT = charset; ]]></Code>
                <LHS><NonterminalRef id="Regex_RG"/></LHS>
                <RHS>
                    <TerminalRef id="Regex_G" name="charset"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="RGtoeps">
                <Code><![CDATA[ RESULT = new CharacterSetRegex(); ]]></Code>
                <LHS><NonterminalRef id="Regex_RG"/></LHS>
                <RHS/>
                <Layout/>
            </Production>
            <Production id="CHARtochar">
                <Code><![CDATA[ RESULT = character; ]]></Code>
                <LHS><NonterminalRef id="Regex_CHAR"/></LHS>
                <RHS>
                    <TerminalRef id="character" name="character"/>
                </RHS>
                <Layout/>
            </Production>
            <Production id="CHARtoescaped">
                <Code><![CDATA[ RESULT = character; ]]></Code>
                <LHS><NonterminalRef id="Regex_CHAR"/></LHS>
                <RHS>
                    <TerminalRef id="escaped" name="character"/>
                </RHS>
                <Layout/>
            </Production>
        </Declarations>
    </Grammar>
</CopperSpec>
